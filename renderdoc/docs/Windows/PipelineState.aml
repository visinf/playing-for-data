<?xml version="1.0" encoding="utf-8"?>
<topic id="A44E2304-6C11-451D-89C4-0A7397F5D1C6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The Pipeline Viewer is an information dense but simple window
      in RenderDoc. It shows all of the stateful settings of the graphics pipeline, including
      bound resources, rasterizer settings, etc.</para>
    </introduction>
    <section address="pipeline">
      <title>Pipeline flowchart</title>
      <content>
        <para>At the top of the Pipeline Viewer is the pipeline flowchart - this shows the
        high-level block level diagram of the graphics pipeline.</para>
        <para>Each block is a separate page which contains the relevant state and contents
        for that piece of the graphics pipeline, with specific details varying by API
        and the type of data to be displayed.</para>
        <para>The currently selected block is outlined with red, and the page in view reflects
        the contents of that section of the pipeline. Light grey parts of the pipeline are
        those which are currently active and participating in this drawcall. Dark grey parts
        of the pipeline are not present and can be considered pass-through/do-nothing.</para>
        <mediaLink>
<caption placement="after" lead="Pipeline">Pictured here, the high-level parts of the D3D11 Pipeline.</caption>
<image xlink:href="PipelineBar"/>
</mediaLink>

<alert class="note">
  <para>In D3D11, the Stream-Out stage is available under the Geometry Shader block, with the buffers
  being used for stream-out shown. Similarly for GL, the transform feedback is listed in the geometry
  shader block.</para>
</alert>

      </content>
    </section>
    <section address="display">
      <title>Pipeline Section Display</title>
      <content>
      <para>The pipeline state viewer always displays the state of the pipeline after the execution of the
      drawcall, as with the other viewers in RenderDoc.</para>
      <para>Any resources that are bound to the pipeline can be opened in more detailed viewers, such as
      vertex buffers, constant buffers and textures. More details of this process can be found in the page
      <link xlink:href="7A620DF5-332E-44CA-8FD5-9E47A9C4CC3E" />.</para>
      <para>The pipeline view attempts to only show what is relevant, and not all possible stateful data.
      To do this (when available) it uses shader reflection data to only display slots which are actually
      in use by the shaders, and omit any that are unused. This can be overridden with the Show Disabled
      Items <mediaLinkInline><image xlink:href="page_white_delete"/></mediaLinkInline> button.</para>
      <para>Likewise it will omit any slots which are completely empty (and also unused), and this behaviour
      can be overridden with the Show Empty Items <mediaLinkInline><image xlink:href="page_white_database"/></mediaLinkInline> button.</para>
      <para>In some cases whole sections will be omitted unless there is anything set there - this is primarily
      for unused or rarely used features like shader subroutines/class linkage, and Read/Write bindings
      (Image load store or UAVs).</para>
      <para>When showing disabled or empty entries, they will either be in <legacyItalic>italics</legacyItalic>
      or on a dark red background respectively.</para>
      <para>You can also export the pipeline state by clicking on the
      <mediaLinkInline><image xlink:href="save"/></mediaLinkInline> export button, this will export the
      entire pipeline state in detail to an HTML file, so you can more easily compare between different
      logs and different events.</para>
      </content>
    </section>
    <relatedTopics>
      <link xlink:href="7A620DF5-332E-44CA-8FD5-9E47A9C4CC3E" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>