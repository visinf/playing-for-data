/******************************************************************************
 * The MIT License (MIT)
 * 
 * Copyright (c) 2015 Baldur Karlsson
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

#version 420 core

#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require

layout(binding = 0) uniform atomic_uint pickresult_counter;
layout(binding = 0) writeonly buffer pickresult_buffer
{
	uvec4 results[];
} pickresult;

layout(binding = 1) readonly buffer vertex_data
{
	vec4 data[];
} vb;

layout(binding = 2) readonly buffer index_data
{
	uint data[];
} ib;


uniform vec2 PickCoords;
uniform vec2 PickViewport;

uniform mat4 PickMVP;

uniform uint PickIdx;
uniform uint PickNumVerts;

layout (local_size_x = 1024, local_size_y = 1) in;

void main()
{
	uvec3 tid = gl_GlobalInvocationID;

	uint vertid = tid.x;

	if(vertid >= PickNumVerts)
		return;

	uint idx = PickIdx != 0 ? ib.data[vertid] : vertid;

	vec4 pos = vb.data[idx];

	vec4 wpos = PickMVP * pos;

	wpos.xyz /= wpos.www;

	vec2 scr = (wpos.xy*vec2(1.0f, -1.0f) + 1.0f) * 0.5f * PickViewport;

	// close to target co-ords? add to list
	float len = length(scr - PickCoords);
	if(len < 35.0f)
	{
		uint result_idx = atomicCounterIncrement(pickresult_counter);
		pickresult.results[result_idx] = uvec4(vertid, idx, floatBitsToUint(len), floatBitsToUint(wpos.z));
	}
}